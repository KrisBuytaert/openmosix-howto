<CHAPTER ID="Compiling">
<TITLE>Improving Compiling Performance</TITLE>
<SECT1><TITLE>Introduction</TITLE>
<PARA><emphasis>This Section is a Work in Progress</emphasis>
</para>

<PARA>
Lots of people try to use openMosix as a kind of compile farm, ofthen they 
come back very disappointed.  
This chapter of the howto will try to explain in which cases your 
compilations will benefit from openMosix and how to improve your 
successlevel.
</PARA>
<PARA>
First of all you have to remember 1 thing.
openMosix will not migrate <emphasis>all</emphasis> processes you start on 
your cluster, only 
the ones that will benefit from migration to another node.  For compiling 
this means that a process has to last long enough. Kernel compiles 
typically consist of numerous short compiles, each of them not being long 
enough to acutally migrate. </PARA>

<!-- <para>Lets have a look at distcc 
http://distcc.samba.org
</para>
 <para> 
(psypete wrote) 
long story short: you can use tools like distcc and ccache to 
distribute the compiles to other machines without the need for 
openMosix, but they can also be used WITH openmosix quite easily. 
gecc is a future replacement for the two tools, but it doesn't 
appear to be ready for production use yet. 

there is another program which will eventually replace distcc 
and ccache called gecc (http://gecc.sf.net/). last i heard it 
couldn't replace distcc entirely, but it's getting there. 
personally i'm thinking of re-implementing distcc with a better 
"scheduler" since distcc didn't work so well for myself as-is.
 
</para>
-->
</SECT1>





</CHAPTER>


